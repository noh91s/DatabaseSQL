1. 데이터 모델링의 정의
데이터를 실체(Entity)와 관계(Relation)를 중심으로 명확하고 체계적으로 표현하여 문서화 하는 기법
2. 데이터 모델링의 목정
- 연관 조직의 정보요구에 대한 정확한 이해를 할 수 있다
- 사용자, 설계자, 갭라자 간에 효율적인 의사소통 수단을 제공한다
- 데이터 체계 구축을 통한 고품질 S/W와 유지보수 비용의 감소 효과를 기대할 수 있다
- 신규 또는 개선 시스템의 개발기초를 제공한다

ERD(EntityRelationDiagram)
시나리오 -> 특정 컨셉으로 프로젝트를 생성시
"한명의 회원이 게시판에 게시글을 작성"
"한명의 회원이 여러글 작성"

ER모델링의 장접
조직에 대한 정보를 정확하고 자세하게 문서화
정보 요구사항의 범위를 명확히 기술
데이터베이스 설계를 쉽게 이해할수 있는 표본 제공
복수 응용




관계형 데이터베이스(RDBMS)



1. 역사
**** 관계형 모델의 구성요소
개체(object) 혹은 관계(relation)의 집합
관계(relation)에 가해지는 연산자의 집합
정확성과 일관성을 위한 데이터 무결성

2. 관계형 데이터베이스 정의
관계형 데이터베이스는 관계들의 모음 또는 이차원 테이블의 모음입니다.
파일 시스템과 데이터베이스 시스템의 차이점
데이터의 무결성을 지켜준다.
데이터의 공유
데이터의 정확성과 일관성
중복성의 제거
불일치를 피할 수 있다.
표준화가 가능

3. 관계형 데이터베이스 특징
데이터의 독립성 보장 : 개념화 기법 발달
각 테이블들은 고유한 이름을 가짐
중복 문제의 해결 기법 제공 : 정규형
데이터 조작언어의 발달 : SQL
관계형 데이터베이스는 테이블(table)들의 모임으로 구성
각 행은 일련의 값들 사이의 관계(relationship)
관계형 데이터베이스는 SQL(Structured Query Language)문을 사용하여 이용되고 수정

4. 엔티티(Entity) 관계 모델
업무 요구 또는 사양으로부터 엔티티 관계 도표를 생성합니다.
시나리오
“한 부서에서 한 명 또는 그 이상의 인원을 배당하십시오.”
“어떤 부서는 아직 인원을 배당 받지 못했습니다”
ER 모델링의 장점
조직에 대한 정보를 정확하고 자세하게 문서화
정보 요구사항의 범위를 명확히 기술
데이터베이스 설계를 쉽게 이해할 수 있는 표본 제공
복수 응용프로그램의 통합화를 위한 효과적 프레임워크 제공

5. 관계형 데이터베이스의 기본 구조
일반적 개념 모델링 DB객체
데이터집합, relation, 개체집합(Entity set) 테이블(Table)
관계집합(relationship set)
관계집합 중 어떤 행(row) 튜플(Tuple), 엔티티(Entity) 레코드(Record)
관계집합 중 어떤 열(column) 속성(Attribute) 필드(Filed)
*** 테이블(table), 행(row), 열(column), 필드(fields), PK, FK등의 개념


system, sys -> 기본으로 제공되는 관리자 계정 -> 사용자를 생성 권한
Mysql -> 관리자 계정 root -> 사용자 생성 , DB생성

1) 계정 생성
create user [id] identified by [pw];

2) 권한 부여 -> 계정을 생성 한 후에 권한을 설정

grant [권한] to 권한을 줄 대상;
grant connect, resource dba to[id];

3) commit
변경 사항들을 적용합니다

4) 계정 생성 확인
select * from all_users;

revoke [권한] from [id];
revoke connect, resource, dba from user1;

+ 계정 삭제
drop user user1 cascade;

SQL
DDL : 데이터를 정의하는 언어
DDL 대상 
	스키마 : 데이터 구조, 직관적으로 구별 가능, -> DB의 전체구조
	도메인(속성): 속성의 타입 크기, 제약조건등의 정보, 속성 범위
	테이블 : 데이터 저장공간
	뷰(View) : 가상의 논리 테이블
	인덱스(Index) : 검색을 빠르게 하기 위한 데이터 구조
DDL:
	create : 테이블, 뷰 생성, create tables~
	alter : 변경, 추가, 타입 변경, 이름 변경 -> 데이터가 이미 있을 경우 데이터가 초기화 될수 있다
	drop : 삭제, 뷰삭제
	truncate 테이블 초기화(테이블의 데이터를 초기화) -> truncate table 테이블 이름
제약조건 
	외래키 설정 방법
	외래키는 참조한는 키가 있는 테이블에서 작성
	외래키는 기본키 또는 기본키 속성(유일값)을 갖는키를 참조한다

	ALTER TABLE 참조하는테이블명
		ADD FOREIGN KEY (외래키)
		REFERENCES 테이블(기본키);
	ALTER TABLE board1
		ADD FOREIGN KEY (userId)
		REFERENCES writer_tb(userId);	
	board1테이블의 외래키 userId(외래키)는 writer_tb테이블의 userId(기본키)를 참조한다
	외래키 설정이 되어 있는 칼럼은 반드시 참조하는 기본키 값이외의 다른값을 추가 할수 없다
	참조무결성 위반
	ALTER TABLE board1 ADD FOEIGN KEY (userId) REFERENCES writer_tb(userId)


	primary key -> 유일성, not null
	foreign key -> 외래키 -> 한사람(유일성) 1 -> N 게시글
	unique -> 유일성(중복불가능)-
	not null -> 값이 반드시 있어야된다	
	check
	입력되는 값이 check를 통해 미리 지정한 조건에 맞지 않으면 오류를 반환하는것
	특정 값이나 범위를 지정해주면 해당 안에 입력 값이 맞는지 확인한다
	CREATE TABLE 테이블명(
		컬럼명 데이터 형식 check (컬럼명 > 조건값)
	);

	시퀀스 설정
	CREATE SEQUENCE my_seq1	-- 시퀀스 명
	INCREMENT BY 1 		-- 증감값
	START WITH 1		-- 시작값, 시작값은 최솟값보다 크거나 같아야 된다
	MINVALUE 1		-- 최솟값
	MAXVALUE 1000		-- 최댓값
	NOCYCLE			-- 반복 유무 -> nocycle 계속 증가
	NOCACHE;		-- 임시 저장 공간을 할당 유무

	정의된 시퀀스 조회 -> select * from user_sequences;
	현재 시퀀스 조회 -> select 시퀀스명.currval from dual; -- dual(가상테이블)
	다음 시퀀스 조회 -> select 시퀀스명.nextval from dual;

키(key) : 하나의 테이블 내에서 각 튜플(레코드)의 유일하게 식별 할 수 있는 속성등의 집합

후보키(Candidate key) -> 기본 키가 될수 있는 키
유일성	 	최소성
학번이름주소	학번

슈퍼키(Super key) -> 학번 - 이름 , 학번 = 이름 - 주소, 결합
유일성을 반족하는 키, 최소성 만족 하지 않아도됨

기본키(Primary key) -> 중복불가능, NULL값을 허용하지 않는다
주민등록번호, 학번, 시퀀스 정의

대채키(Altemateive key) 
후보키 중 기본키를 제외한 나머지 후보키

왜래키(FK) : R1, R2의 연관 관계를 설정 join관계에서 기본키를 참조하는 키

개체무결성 -> 기본키는 null을 가질 수 없다
참조무결성 -> 외래키값은 피참조 릴레이션의 기본키이거나 null값이다
도메인무결성 - > 속성값은 속성 도메인(범위)에 속한 값들 중 하나 이어야 한다


